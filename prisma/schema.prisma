// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  email       String       @unique
  role        UserRole
  password    String
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?
  booking     Booking[]
  payment     Payment[]
  review      Review[]
  Blog        Blog[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  name       String?
  image      String?
  bio        String?
  profession String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Flat {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  images         String[]
  squareFeet     Int
  totalRooms     Int
  totalBedrooms  Int
  totalBathrooms Int
  propertyType   PropertyType
  purpose        Purpose
  parking        Boolean
  elevator       Boolean
  wifi           Boolean
  location       String
  description    String
  amenities      String[]
  availability   Boolean      @default(true)
  rent           Int
  advanceAmount  Int
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  booking Booking[]
  review  Review[]

  @@map("flats")
}

model Booking {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  flatId    String    @db.ObjectId
  flat      Flat      @relation(fields: [flatId], references: [id])
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  status    Status    @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payment   Payment[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    String
  comment   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  flatId    String   @db.ObjectId
  flat      Flat?    @relation(fields: [flatId], references: [id])
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  currency  String
  status    String
  stripeId  String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  bookingId String   @db.ObjectId
  booking   Booking  @relation(fields: [bookingId], references: [id])
  createdAt DateTime @default(now())

  @@map("payments")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  image       String?
  tags        String[]
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

enum Status {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  AGENT
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
}

enum Purpose {
  RENT
  SALE
}
