// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  email       String       @unique
  role        UserRole
  password    String
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?
  booking     Booking[]
  payment     Payment[]
  review      Review[]
  Blog        Blog[]
  property    Property[]

  @@map("users")
}

model UserProfile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  name           String?
  image          String?
  bio            String?
  profession     String?
  company        String?
  phone          String?
  secondaryPhone String?
  emailVerified  Boolean  @default(false)
  phoneVerified  Boolean  @default(false)
  street         String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  website        String?
  socialLinks    String[]
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Property {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  images         String[]
  squareFeet     Int
  totalRooms     Int
  totalBedrooms  Int
  totalBathrooms Int
  propertyType   PropertyType
  purpose        Purpose
  street         String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  description    String
  amenities      String[]
  availability   Boolean      @default(true)
  isFeatured     Boolean      @default(false)
  rent           Int
  advanceAmount  Int
  userId         String       @unique @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking[]
  review  Review[]

  @@map("properties")
}

model Booking {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String    @db.ObjectId
  property   Property  @relation(fields: [propertyId], references: [id])
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  status     Status    @default(PENDING)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  payment    Payment[]

  @@map("bookings")
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  rating     String
  comment    String
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  propertyId String    @db.ObjectId
  property   Property? @relation(fields: [propertyId], references: [id])

  @@map("reviews")
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  currency  String
  status    String
  stripeId  String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  bookingId String   @db.ObjectId
  booking   Booking  @relation(fields: [bookingId], references: [id])
  createdAt DateTime @default(now())

  @@map("payments")
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  image       String?
  tags        String[]
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

enum Status {
  PENDING
  BOOKED
  REJECTED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  AGENT
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
}

enum Purpose {
  RENT
  SALE
}
